#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>
#include "libs/EdubotLib.hpp"

int arredondarParaMultiploDe90(double angulo) {
    return static_cast<int>(std::round(angulo / 90.0)) * 90;
}

int main() {
    EdubotLib *edubotLib = new EdubotLib();
    std::srand(std::time(nullptr));

    const double VELOCIDADE_FIXA = 0.3;
    const int TEMPO_ROTACAO_90 = 1400;

    if (edubotLib->connect()) {
        while (edubotLib->getX() <= 2.75) {
            // Verifica bumpers com prioridade
            bool bumper0 = edubotLib->getBumper(0);
            bool bumper1 = edubotLib->getBumper(1);

            if (bumper0 && bumper1) {
                edubotLib->move(-VELOCIDADE_FIXA);
                edubotLib->sleepMilliseconds(500);
                edubotLib->rotate(90);
                edubotLib->sleepMilliseconds(TEMPO_ROTACAO_90);
                continue;
            } else if (bumper0) {
                edubotLib->rotate(90);
                edubotLib->sleepMilliseconds(TEMPO_ROTACAO_90);
                edubotLib->move(VELOCIDADE_FIXA);
                edubotLib->sleepMilliseconds(500);
                continue;
            } else if (bumper1) {
                edubotLib->rotate(-90);
                edubotLib->sleepMilliseconds(TEMPO_ROTACAO_90);
                edubotLib->move(VELOCIDADE_FIXA);
                edubotLib->sleepMilliseconds(500);
                continue;
            }

            // Corrige orientação para múltiplos de 90
            double theta = edubotLib->getTheta();
            int anguloArredondado = arredondarParaMultiploDe90(theta);
            int deltaAngulo = anguloArredondado - static_cast<int>(theta);
            if (deltaAngulo != 0) {
                edubotLib->rotate(deltaAngulo);
                edubotLib->sleepMilliseconds(20 * std::abs(deltaAngulo));
                continue;
            }

            // Lê apenas os sonares 0, 3 e 6
            double distEsq = edubotLib->getSonar(0);
            double distFrente = edubotLib->getSonar(3);
            double distDir = edubotLib->getSonar(6);

            int melhorIndice = 3;
            double maiorDistancia = distFrente;
            if (distEsq > maiorDistancia && distEsq >= distDir) {
                melhorIndice = 0;
                maiorDistancia = distEsq;
            } else if (distDir > maiorDistancia) {
                melhorIndice = 6;
                maiorDistancia = distDir;
            }

            // Movimento baseado no melhor sonar
            if (melhorIndice == 0 || melhorIndice == 6) {
                edubotLib->move(VELOCIDADE_FIXA);
                edubotLib->sleepMilliseconds(700);

                int angulo = (melhorIndice == 0) ? -90 : 90;
                edubotLib->rotate(angulo);
                edubotLib->sleepMilliseconds(TEMPO_ROTACAO_90);
            }

            edubotLib->move(VELOCIDADE_FIXA);
            edubotLib->sleepMilliseconds(static_cast<int>(maiorDistancia / VELOCIDADE_FIXA * 1000));

            std::cout << "x: " << edubotLib->getX()
                      << ", y: " << edubotLib->getY()
                      << ", theta: " << edubotLib->getTheta() << std::endl;
        }

        edubotLib->neutral();
        edubotLib->sleepMilliseconds(2000);
        edubotLib->stop();
        edubotLib->sleepMilliseconds(2000);
        edubotLib->disconnect();
    } else {
        std::cout << "Não foi possível conectar ao robô!" << std::endl;
    }

    return 0;
}
